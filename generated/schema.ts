// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AddedBatchMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AddedBatchMetadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AddedBatchMetadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AddedBatchMetadata", id.toString(), this);
  }

  static load(id: string): AddedBatchMetadata | null {
    return store.get("AddedBatchMetadata", id) as AddedBatchMetadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get batchId(): BigInt {
    let value = this.get("batchId");
    return value.toBigInt();
  }

  set batchId(value: BigInt) {
    this.set("batchId", Value.fromBigInt(value));
  }

  get metaKeys(): string {
    let value = this.get("metaKeys");
    return value.toString();
  }

  set metaKeys(value: string) {
    this.set("metaKeys", Value.fromString(value));
  }

  get metaValues(): string {
    let value = this.get("metaValues");
    return value.toString();
  }

  set metaValues(value: string) {
    this.set("metaValues", Value.fromString(value));
  }
}

export class AddedCcyType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AddedCcyType entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AddedCcyType entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AddedCcyType", id.toString(), this);
  }

  static load(id: string): AddedCcyType | null {
    return store.get("AddedCcyType", id) as AddedCcyType | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get unit(): string {
    let value = this.get("unit");
    return value.toString();
  }

  set unit(value: string) {
    this.set("unit", Value.fromString(value));
  }
}

export class AddedSecTokenType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AddedSecTokenType entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AddedSecTokenType entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AddedSecTokenType", id.toString(), this);
  }

  static load(id: string): AddedSecTokenType | null {
    return store.get("AddedSecTokenType", id) as AddedSecTokenType | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get settlementType(): i32 {
    let value = this.get("settlementType");
    return value.toI32();
  }

  set settlementType(value: i32) {
    this.set("settlementType", Value.fromI32(value));
  }

  get expiryTimestamp(): BigInt {
    let value = this.get("expiryTimestamp");
    return value.toBigInt();
  }

  set expiryTimestamp(value: BigInt) {
    this.set("expiryTimestamp", Value.fromBigInt(value));
  }

  get underlyerTypeId(): BigInt {
    let value = this.get("underlyerTypeId");
    return value.toBigInt();
  }

  set underlyerTypeId(value: BigInt) {
    this.set("underlyerTypeId", Value.fromBigInt(value));
  }

  get refCcyId(): BigInt {
    let value = this.get("refCcyId");
    return value.toBigInt();
  }

  set refCcyId(value: BigInt) {
    this.set("refCcyId", Value.fromBigInt(value));
  }

  get initMarginBips(): BigInt {
    let value = this.get("initMarginBips");
    return value.toBigInt();
  }

  set initMarginBips(value: BigInt) {
    this.set("initMarginBips", Value.fromBigInt(value));
  }

  get varMarginBips(): BigInt {
    let value = this.get("varMarginBips");
    return value.toBigInt();
  }

  set varMarginBips(value: BigInt) {
    this.set("varMarginBips", Value.fromBigInt(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Approval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Approval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Approval", id.toString(), this);
  }

  static load(id: string): Approval | null {
    return store.get("Approval", id) as Approval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    return value.toString();
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class Burned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Burned entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Burned entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Burned", id.toString(), this);
  }

  static load(id: string): Burned | null {
    return store.get("Burned", id) as Burned | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get burnedQty(): BigInt {
    let value = this.get("burnedQty");
    return value.toBigInt();
  }

  set burnedQty(value: BigInt) {
    this.set("burnedQty", Value.fromBigInt(value));
  }
}

export class BurnedFullSecToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BurnedFullSecToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BurnedFullSecToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BurnedFullSecToken", id.toString(), this);
  }

  static load(id: string): BurnedFullSecToken | null {
    return store.get("BurnedFullSecToken", id) as BurnedFullSecToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stId(): BigInt {
    let value = this.get("stId");
    return value.toBigInt();
  }

  set stId(value: BigInt) {
    this.set("stId", Value.fromBigInt(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get burnedQty(): BigInt {
    let value = this.get("burnedQty");
    return value.toBigInt();
  }

  set burnedQty(value: BigInt) {
    this.set("burnedQty", Value.fromBigInt(value));
  }
}

export class BurnedPartialSecToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BurnedPartialSecToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BurnedPartialSecToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BurnedPartialSecToken", id.toString(), this);
  }

  static load(id: string): BurnedPartialSecToken | null {
    return store.get(
      "BurnedPartialSecToken",
      id
    ) as BurnedPartialSecToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stId(): BigInt {
    let value = this.get("stId");
    return value.toBigInt();
  }

  set stId(value: BigInt) {
    this.set("stId", Value.fromBigInt(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get burnedQty(): BigInt {
    let value = this.get("burnedQty");
    return value.toBigInt();
  }

  set burnedQty(value: BigInt) {
    this.set("burnedQty", Value.fromBigInt(value));
  }
}

export class CcyFundedLedger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CcyFundedLedger entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CcyFundedLedger entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CcyFundedLedger", id.toString(), this);
  }

  static load(id: string): CcyFundedLedger | null {
    return store.get("CcyFundedLedger", id) as CcyFundedLedger | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get desc(): string {
    let value = this.get("desc");
    return value.toString();
  }

  set desc(value: string) {
    this.set("desc", Value.fromString(value));
  }
}

export class CcyWithdrewLedger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CcyWithdrewLedger entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CcyWithdrewLedger entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CcyWithdrewLedger", id.toString(), this);
  }

  static load(id: string): CcyWithdrewLedger | null {
    return store.get("CcyWithdrewLedger", id) as CcyWithdrewLedger | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get desc(): string {
    let value = this.get("desc");
    return value.toString();
  }

  set desc(value: string) {
    this.set("desc", Value.fromString(value));
  }
}

export class SetFutureVariationMargin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SetFutureVariationMargin entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFutureVariationMargin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFutureVariationMargin", id.toString(), this);
  }

  static load(id: string): SetFutureVariationMargin | null {
    return store.get(
      "SetFutureVariationMargin",
      id
    ) as SetFutureVariationMargin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get varMarginBips(): BigInt {
    let value = this.get("varMarginBips");
    return value.toBigInt();
  }

  set varMarginBips(value: BigInt) {
    this.set("varMarginBips", Value.fromBigInt(value));
  }
}

export class SetFutureFeePerContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SetFutureFeePerContract entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFutureFeePerContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFutureFeePerContract", id.toString(), this);
  }

  static load(id: string): SetFutureFeePerContract | null {
    return store.get(
      "SetFutureFeePerContract",
      id
    ) as SetFutureFeePerContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get feePerContract(): BigInt {
    let value = this.get("feePerContract");
    return value.toBigInt();
  }

  set feePerContract(value: BigInt) {
    this.set("feePerContract", Value.fromBigInt(value));
  }
}

export class Minted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Minted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Minted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Minted", id.toString(), this);
  }

  static load(id: string): Minted | null {
    return store.get("Minted", id) as Minted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get batchId(): BigInt {
    let value = this.get("batchId");
    return value.toBigInt();
  }

  set batchId(value: BigInt) {
    this.set("batchId", Value.fromBigInt(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get mintQty(): BigInt {
    let value = this.get("mintQty");
    return value.toBigInt();
  }

  set mintQty(value: BigInt) {
    this.set("mintQty", Value.fromBigInt(value));
  }

  get mintSecTokenCount(): BigInt {
    let value = this.get("mintSecTokenCount");
    return value.toBigInt();
  }

  set mintSecTokenCount(value: BigInt) {
    this.set("mintSecTokenCount", Value.fromBigInt(value));
  }
}

export class MintedSecToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintedSecToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintedSecToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintedSecToken", id.toString(), this);
  }

  static load(id: string): MintedSecToken | null {
    return store.get("MintedSecToken", id) as MintedSecToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stId(): BigInt {
    let value = this.get("stId");
    return value.toBigInt();
  }

  set stId(value: BigInt) {
    this.set("stId", Value.fromBigInt(value));
  }

  get batchId(): BigInt {
    let value = this.get("batchId");
    return value.toBigInt();
  }

  set batchId(value: BigInt) {
    this.set("batchId", Value.fromBigInt(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get mintedQty(): BigInt {
    let value = this.get("mintedQty");
    return value.toBigInt();
  }

  set mintedQty(value: BigInt) {
    this.set("mintedQty", Value.fromBigInt(value));
  }
}

export class SetBatchOriginatorFee_Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SetBatchOriginatorFee_Token entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetBatchOriginatorFee_Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetBatchOriginatorFee_Token", id.toString(), this);
  }

  static load(id: string): SetBatchOriginatorFee_Token | null {
    return store.get(
      "SetBatchOriginatorFee_Token",
      id
    ) as SetBatchOriginatorFee_Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get batchId(): BigInt {
    let value = this.get("batchId");
    return value.toBigInt();
  }

  set batchId(value: BigInt) {
    this.set("batchId", Value.fromBigInt(value));
  }

  get originatorFee(): string | null {
    let value = this.get("originatorFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set originatorFee(value: string | null) {
    if (value === null) {
      this.unset("originatorFee");
    } else {
      this.set("originatorFee", Value.fromString(value as string));
    }
  }
}

export class SetBatchOriginatorFee_Currency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SetBatchOriginatorFee_Currency entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetBatchOriginatorFee_Currency entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetBatchOriginatorFee_Currency", id.toString(), this);
  }

  static load(id: string): SetBatchOriginatorFee_Currency | null {
    return store.get(
      "SetBatchOriginatorFee_Currency",
      id
    ) as SetBatchOriginatorFee_Currency | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get batchId(): BigInt {
    let value = this.get("batchId");
    return value.toBigInt();
  }

  set batchId(value: BigInt) {
    this.set("batchId", Value.fromBigInt(value));
  }

  get origCcyFee_percBips_ExFee(): BigInt {
    let value = this.get("origCcyFee_percBips_ExFee");
    return value.toBigInt();
  }

  set origCcyFee_percBips_ExFee(value: BigInt) {
    this.set("origCcyFee_percBips_ExFee", Value.fromBigInt(value));
  }
}

export class TransferedFullSecToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TransferedFullSecToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferedFullSecToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferedFullSecToken", id.toString(), this);
  }

  static load(id: string): TransferedFullSecToken | null {
    return store.get(
      "TransferedFullSecToken",
      id
    ) as TransferedFullSecToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get stId(): BigInt {
    let value = this.get("stId");
    return value.toBigInt();
  }

  set stId(value: BigInt) {
    this.set("stId", Value.fromBigInt(value));
  }

  get mergedToSecTokenId(): BigInt | null {
    let value = this.get("mergedToSecTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set mergedToSecTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("mergedToSecTokenId");
    } else {
      this.set("mergedToSecTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get qty(): BigInt {
    let value = this.get("qty");
    return value.toBigInt();
  }

  set qty(value: BigInt) {
    this.set("qty", Value.fromBigInt(value));
  }

  get transferType(): string {
    let value = this.get("transferType");
    return value.toString();
  }

  set transferType(value: string) {
    this.set("transferType", Value.fromString(value));
  }
}

export class TransferedPartialSecToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TransferedPartialSecToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferedPartialSecToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferedPartialSecToken", id.toString(), this);
  }

  static load(id: string): TransferedPartialSecToken | null {
    return store.get(
      "TransferedPartialSecToken",
      id
    ) as TransferedPartialSecToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get splitFromSecTokenId(): BigInt {
    let value = this.get("splitFromSecTokenId");
    return value.toBigInt();
  }

  set splitFromSecTokenId(value: BigInt) {
    this.set("splitFromSecTokenId", Value.fromBigInt(value));
  }

  get newSecTokenId(): BigInt {
    let value = this.get("newSecTokenId");
    return value.toBigInt();
  }

  set newSecTokenId(value: BigInt) {
    this.set("newSecTokenId", Value.fromBigInt(value));
  }

  get mergedToSecTokenId(): BigInt {
    let value = this.get("mergedToSecTokenId");
    return value.toBigInt();
  }

  set mergedToSecTokenId(value: BigInt) {
    this.set("mergedToSecTokenId", Value.fromBigInt(value));
  }

  get qty(): BigInt {
    let value = this.get("qty");
    return value.toBigInt();
  }

  set qty(value: BigInt) {
    this.set("qty", Value.fromBigInt(value));
  }

  get transferType(): string {
    let value = this.get("transferType");
    return value.toString();
  }

  set transferType(value: string) {
    this.set("transferType", Value.fromString(value));
  }
}

export class TradedCcyTok extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradedCcyTok entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradedCcyTok entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradedCcyTok", id.toString(), this);
  }

  static load(id: string): TradedCcyTok | null {
    return store.get("TradedCcyTok", id) as TradedCcyTok | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get ccyAmount(): BigInt {
    let value = this.get("ccyAmount");
    return value.toBigInt();
  }

  set ccyAmount(value: BigInt) {
    this.set("ccyAmount", Value.fromBigInt(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get tokQty(): BigInt {
    let value = this.get("tokQty");
    return value.toBigInt();
  }

  set tokQty(value: BigInt) {
    this.set("tokQty", Value.fromBigInt(value));
  }

  get ccyFeeFrom(): BigInt {
    let value = this.get("ccyFeeFrom");
    return value.toBigInt();
  }

  set ccyFeeFrom(value: BigInt) {
    this.set("ccyFeeFrom", Value.fromBigInt(value));
  }

  get ccyFeeTo(): BigInt {
    let value = this.get("ccyFeeTo");
    return value.toBigInt();
  }

  set ccyFeeTo(value: BigInt) {
    this.set("ccyFeeTo", Value.fromBigInt(value));
  }
}

export class TransferedLedgerCcy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TransferedLedgerCcy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferedLedgerCcy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferedLedgerCcy", id.toString(), this);
  }

  static load(id: string): TransferedLedgerCcy | null {
    return store.get("TransferedLedgerCcy", id) as TransferedLedgerCcy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transferType(): string {
    let value = this.get("transferType");
    return value.toString();
  }

  set transferType(value: string) {
    this.set("transferType", Value.fromString(value));
  }
}

export class ReservedLedgerCcy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReservedLedgerCcy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReservedLedgerCcy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReservedLedgerCcy", id.toString(), this);
  }

  static load(id: string): ReservedLedgerCcy | null {
    return store.get("ReservedLedgerCcy", id) as ReservedLedgerCcy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class SetFeeTokFix extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeTokFix entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeTokFix entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeTokFix", id.toString(), this);
  }

  static load(id: string): SetFeeTokFix | null {
    return store.get("SetFeeTokFix", id) as SetFeeTokFix | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get fee_tokenQty_Fixed(): BigInt {
    let value = this.get("fee_tokenQty_Fixed");
    return value.toBigInt();
  }

  set fee_tokenQty_Fixed(value: BigInt) {
    this.set("fee_tokenQty_Fixed", Value.fromBigInt(value));
  }
}

export class SetFeeCcyFix extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeCcyFix entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeCcyFix entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeCcyFix", id.toString(), this);
  }

  static load(id: string): SetFeeCcyFix | null {
    return store.get("SetFeeCcyFix", id) as SetFeeCcyFix | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get fee_ccy_Fixed(): BigInt {
    let value = this.get("fee_ccy_Fixed");
    return value.toBigInt();
  }

  set fee_ccy_Fixed(value: BigInt) {
    this.set("fee_ccy_Fixed", Value.fromBigInt(value));
  }
}

export class SetFeeTokBps extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeTokBps entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeTokBps entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeTokBps", id.toString(), this);
  }

  static load(id: string): SetFeeTokBps | null {
    return store.get("SetFeeTokBps", id) as SetFeeTokBps | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get fee_token_PercBips(): BigInt {
    let value = this.get("fee_token_PercBips");
    return value.toBigInt();
  }

  set fee_token_PercBips(value: BigInt) {
    this.set("fee_token_PercBips", Value.fromBigInt(value));
  }
}

export class SetFeeCcyBps extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeCcyBps entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeCcyBps entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeCcyBps", id.toString(), this);
  }

  static load(id: string): SetFeeCcyBps | null {
    return store.get("SetFeeCcyBps", id) as SetFeeCcyBps | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get fee_ccy_PercBips(): BigInt {
    let value = this.get("fee_ccy_PercBips");
    return value.toBigInt();
  }

  set fee_ccy_PercBips(value: BigInt) {
    this.set("fee_ccy_PercBips", Value.fromBigInt(value));
  }
}

export class SetFeeTokMin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeTokMin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeTokMin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeTokMin", id.toString(), this);
  }

  static load(id: string): SetFeeTokMin | null {
    return store.get("SetFeeTokMin", id) as SetFeeTokMin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get fee_token_Min(): BigInt {
    let value = this.get("fee_token_Min");
    return value.toBigInt();
  }

  set fee_token_Min(value: BigInt) {
    this.set("fee_token_Min", Value.fromBigInt(value));
  }
}

export class SetFeeCcyMin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeCcyMin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeCcyMin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeCcyMin", id.toString(), this);
  }

  static load(id: string): SetFeeCcyMin | null {
    return store.get("SetFeeCcyMin", id) as SetFeeCcyMin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get fee_ccy_Min(): BigInt {
    let value = this.get("fee_ccy_Min");
    return value.toBigInt();
  }

  set fee_ccy_Min(value: BigInt) {
    this.set("fee_ccy_Min", Value.fromBigInt(value));
  }
}

export class SetFeeTokMax extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeTokMax entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeTokMax entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeTokMax", id.toString(), this);
  }

  static load(id: string): SetFeeTokMax | null {
    return store.get("SetFeeTokMax", id) as SetFeeTokMax | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get fee_token_Max(): BigInt {
    let value = this.get("fee_token_Max");
    return value.toBigInt();
  }

  set fee_token_Max(value: BigInt) {
    this.set("fee_token_Max", Value.fromBigInt(value));
  }
}

export class SetFeeCcyMax extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeCcyMax entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeCcyMax entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeCcyMax", id.toString(), this);
  }

  static load(id: string): SetFeeCcyMax | null {
    return store.get("SetFeeCcyMax", id) as SetFeeCcyMax | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get fee_ccy_Max(): BigInt {
    let value = this.get("fee_ccy_Max");
    return value.toBigInt();
  }

  set fee_ccy_Max(value: BigInt) {
    this.set("fee_ccy_Max", Value.fromBigInt(value));
  }
}

export class SetFeeCcyPerMillion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeCcyPerMillion entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeCcyPerMillion entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeCcyPerMillion", id.toString(), this);
  }

  static load(id: string): SetFeeCcyPerMillion | null {
    return store.get("SetFeeCcyPerMillion", id) as SetFeeCcyPerMillion | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get ccyTypeId(): BigInt {
    let value = this.get("ccyTypeId");
    return value.toBigInt();
  }

  set ccyTypeId(value: BigInt) {
    this.set("ccyTypeId", Value.fromBigInt(value));
  }

  get fee_ccy_perMillion(): BigInt {
    let value = this.get("fee_ccy_perMillion");
    return value.toBigInt();
  }

  set fee_ccy_perMillion(value: BigInt) {
    this.set("fee_ccy_perMillion", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class IssuanceSubscribed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IssuanceSubscribed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IssuanceSubscribed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IssuanceSubscribed", id.toString(), this);
  }

  static load(id: string): IssuanceSubscribed | null {
    return store.get("IssuanceSubscribed", id) as IssuanceSubscribed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subscriber(): string {
    let value = this.get("subscriber");
    return value.toString();
  }

  set subscriber(value: string) {
    this.set("subscriber", Value.fromString(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get weiSent(): BigInt {
    let value = this.get("weiSent");
    return value.toBigInt();
  }

  set weiSent(value: BigInt) {
    this.set("weiSent", Value.fromBigInt(value));
  }

  get weiChange(): BigInt {
    let value = this.get("weiChange");
    return value.toBigInt();
  }

  set weiChange(value: BigInt) {
    this.set("weiChange", Value.fromBigInt(value));
  }

  get tokensSubscribed(): BigInt {
    let value = this.get("tokensSubscribed");
    return value.toBigInt();
  }

  set tokensSubscribed(value: BigInt) {
    this.set("tokensSubscribed", Value.fromBigInt(value));
  }

  get weiPrice(): BigInt {
    let value = this.get("weiPrice");
    return value.toBigInt();
  }

  set weiPrice(value: BigInt) {
    this.set("weiPrice", Value.fromBigInt(value));
  }
}

export class IssuerPaymentProcessed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save IssuerPaymentProcessed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IssuerPaymentProcessed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IssuerPaymentProcessed", id.toString(), this);
  }

  static load(id: string): IssuerPaymentProcessed | null {
    return store.get(
      "IssuerPaymentProcessed",
      id
    ) as IssuerPaymentProcessed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get paymentId(): BigInt {
    let value = this.get("paymentId");
    return value.toBigInt();
  }

  set paymentId(value: BigInt) {
    this.set("paymentId", Value.fromBigInt(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    return value.toBigInt();
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get totalBatchCount(): BigInt {
    let value = this.get("totalBatchCount");
    return value.toBigInt();
  }

  set totalBatchCount(value: BigInt) {
    this.set("totalBatchCount", Value.fromBigInt(value));
  }
}

export class IssuerPaymentBatchProcessed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save IssuerPaymentBatchProcessed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IssuerPaymentBatchProcessed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IssuerPaymentBatchProcessed", id.toString(), this);
  }

  static load(id: string): IssuerPaymentBatchProcessed | null {
    return store.get(
      "IssuerPaymentBatchProcessed",
      id
    ) as IssuerPaymentBatchProcessed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get paymentId(): BigInt {
    let value = this.get("paymentId");
    return value.toBigInt();
  }

  set paymentId(value: BigInt) {
    this.set("paymentId", Value.fromBigInt(value));
  }

  get paymentBatchId(): BigInt {
    let value = this.get("paymentBatchId");
    return value.toBigInt();
  }

  set paymentBatchId(value: BigInt) {
    this.set("paymentBatchId", Value.fromBigInt(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get weiSent(): BigInt {
    let value = this.get("weiSent");
    return value.toBigInt();
  }

  set weiSent(value: BigInt) {
    this.set("weiSent", Value.fromBigInt(value));
  }

  get weiChange(): BigInt {
    let value = this.get("weiChange");
    return value.toBigInt();
  }

  set weiChange(value: BigInt) {
    this.set("weiChange", Value.fromBigInt(value));
  }
}

export class SubscriberPaid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SubscriberPaid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SubscriberPaid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SubscriberPaid", id.toString(), this);
  }

  static load(id: string): SubscriberPaid | null {
    return store.get("SubscriberPaid", id) as SubscriberPaid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get paymentId(): BigInt {
    let value = this.get("paymentId");
    return value.toBigInt();
  }

  set paymentId(value: BigInt) {
    this.set("paymentId", Value.fromBigInt(value));
  }

  get paymentBatchId(): BigInt {
    let value = this.get("paymentBatchId");
    return value.toBigInt();
  }

  set paymentBatchId(value: BigInt) {
    this.set("paymentBatchId", Value.fromBigInt(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get subscriber(): string {
    let value = this.get("subscriber");
    return value.toString();
  }

  set subscriber(value: string) {
    this.set("subscriber", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class FutureOpenInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FutureOpenInterest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FutureOpenInterest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FutureOpenInterest", id.toString(), this);
  }

  static load(id: string): FutureOpenInterest | null {
    return store.get("FutureOpenInterest", id) as FutureOpenInterest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shortStId(): BigInt {
    let value = this.get("shortStId");
    return value.toBigInt();
  }

  set shortStId(value: BigInt) {
    this.set("shortStId", Value.fromBigInt(value));
  }

  get long(): string {
    let value = this.get("long");
    return value.toString();
  }

  set long(value: string) {
    this.set("long", Value.fromString(value));
  }

  get short(): string {
    let value = this.get("short");
    return value.toString();
  }

  set short(value: string) {
    this.set("short", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get qty(): BigInt {
    let value = this.get("qty");
    return value.toBigInt();
  }

  set qty(value: BigInt) {
    this.set("qty", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get feeLong(): BigInt {
    let value = this.get("feeLong");
    return value.toBigInt();
  }

  set feeLong(value: BigInt) {
    this.set("feeLong", Value.fromBigInt(value));
  }

  get feeShort(): BigInt {
    let value = this.get("feeShort");
    return value.toBigInt();
  }

  set feeShort(value: BigInt) {
    this.set("feeShort", Value.fromBigInt(value));
  }
}

export class SetInitialMarginOverride extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SetInitialMarginOverride entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetInitialMarginOverride entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetInitialMarginOverride", id.toString(), this);
  }

  static load(id: string): SetInitialMarginOverride | null {
    return store.get(
      "SetInitialMarginOverride",
      id
    ) as SetInitialMarginOverride | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledgerOwner(): string {
    let value = this.get("ledgerOwner");
    return value.toString();
  }

  set ledgerOwner(value: string) {
    this.set("ledgerOwner", Value.fromString(value));
  }

  get tokTypeId(): BigInt {
    let value = this.get("tokTypeId");
    return value.toBigInt();
  }

  set tokTypeId(value: BigInt) {
    this.set("tokTypeId", Value.fromBigInt(value));
  }

  get initMarginBips(): BigInt {
    let value = this.get("initMarginBips");
    return value.toBigInt();
  }

  set initMarginBips(value: BigInt) {
    this.set("initMarginBips", Value.fromBigInt(value));
  }
}

export class TakePay2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TakePay2 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TakePay2 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TakePay2", id.toString(), this);
  }

  static load(id: string): TakePay2 | null {
    return store.get("TakePay2", id) as TakePay2 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get ccyId(): BigInt {
    let value = this.get("ccyId");
    return value.toBigInt();
  }

  set ccyId(value: BigInt) {
    this.set("ccyId", Value.fromBigInt(value));
  }

  get delta(): BigInt {
    let value = this.get("delta");
    return value.toBigInt();
  }

  set delta(value: BigInt) {
    this.set("delta", Value.fromBigInt(value));
  }

  get done(): BigInt {
    let value = this.get("done");
    return value.toBigInt();
  }

  set done(value: BigInt) {
    this.set("done", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }
}

export class Combine extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Combine entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Combine entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Combine", id.toString(), this);
  }

  static load(id: string): Combine | null {
    return store.get("Combine", id) as Combine | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get masterStId(): BigInt {
    let value = this.get("masterStId");
    return value.toBigInt();
  }

  set masterStId(value: BigInt) {
    this.set("masterStId", Value.fromBigInt(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get countTokensCombined(): BigInt {
    let value = this.get("countTokensCombined");
    return value.toBigInt();
  }

  set countTokensCombined(value: BigInt) {
    this.set("countTokensCombined", Value.fromBigInt(value));
  }
}
